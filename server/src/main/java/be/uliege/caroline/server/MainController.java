package be.uliege.caroline.server;


import java.util.Optional;
import javax.validation.Valid;
import be.uliege.caroline.server.PatientRepository;
import be.uliege.caroline.server.Patient;
import org.springframework.http.ResponseEntity;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

@RestController // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class MainController {
  private static final Logger log = LoggerFactory.getLogger(MainController.class);


  @Autowired // This means to get the bean called userRepository
         // Which is auto-generated by Spring, we will use it to handle the data
  private PatientRepository patientRepository;


  @PostMapping(path="/add") // Map ONLY POST Requests
  public void addNewUser (@RequestBody Patient u) {
    // @ResponseBody means the returned String is the response, not a view name
    // @RequestParam means it is a parameter from the GET or POST request

    log.info("Add user request " + u.getName());

    patientRepository.save(u);
    return;
    
  }


  @GetMapping(path="/all")
  public @ResponseBody Iterable<Patient> getAllUsers() {
    // This returns a JSON or XML with the users
    return patientRepository.findAll();
  }
  
//Get a Single Patient
	
	  @GetMapping("/patient/{id}") public Optional
	  getPatientById(@PathVariable(value = "id") Integer patient_id) { return
	  patientRepository.findById(patient_id);
	  
	  }
	 


//Update a Patient from the Arduino

  @PutMapping("/patient/{id}") public Patient
  updatePatient(@PathVariable(value = "id") Integer patient_id,
  
  @Valid @RequestBody Patient patientDetails) {
  
  
  java.util.Optional<Patient> patient = patientRepository.findById(patient_id);
  
  patient.get().setDehydrationState(patientDetails.getDehydrationState());
  patient.get().setHeartbeat(patientDetails.getHeartbeat());
  patient.get().setSpo2(patientDetails.getSpo2());
  
  Patient updatePatient = (Patient) patientRepository.save(patient.get());
  
  return (Patient) updatePatient; }
 
  // Update a patient from the app
  
  @PutMapping("/patientAll/{id}") public Patient
  updatePatientAll(@PathVariable(value = "id") Integer patient_id,
  
  @Valid @RequestBody Patient patientDetails) {
  
  
  java.util.Optional<Patient> patient = patientRepository.findById(patient_id);
  
  patient.get().setDehydrationState(patientDetails.getDehydrationState());
  patient.get().setName(patientDetails.getName());
  patient.get().setForename(patientDetails.getForename());
  patient.get().setBirthday(patientDetails.getBirthday());
  patient.get().setDesease1(patientDetails.getDisease1());
  patient.get().setMedication1(patientDetails.getMedication1());
  patient.get().setMedication2(patientDetails.getMedication2());
  patient.get().setMedication3(patientDetails.getMedication3());
  patient.get().setHeight(patientDetails.getHeight());
  patient.get().setWeight(patientDetails.getWeight());
  patient.get().setGender(patientDetails.getGender());
  patient.get().setRoom(patientDetails.getRoom());
  patient.get().setHeartbeat(patientDetails.getHeartbeat());
  patient.get().setSpo2(patientDetails.getSpo2());

  
  Patient updatePatient = (Patient) patientRepository.save(patient.get());
  
  return (Patient) updatePatient; }
 
  
	  //Delete a Patient
	  
	  @DeleteMapping("/patient/{id}") public ResponseEntity<?>
	  deletePatient(@PathVariable(value = "id") Integer patientId){
	  Optional<Patient> patient = patientRepository.findById(patientId);
	  
	  patientRepository.delete(patient.get());
	  
	  return ResponseEntity.ok().build(); }
	  
	  }
	 